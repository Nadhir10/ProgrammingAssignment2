install.packages("devtools")
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags,class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flags_colors)
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags,unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library(datasets)
data(iris)
library(datasets)
iris
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange
)
flag_colors <- flags[, 11:17]
head(flags_colors)
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
sahpe_mat
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags,unique)
unique_values
unique_vals
sapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags, class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
swirl()
library(datasets)
data(iris)
?iris
sapply(iris,mean)
ok()
?round
round(5,7)
round(6.8)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
data(mtcars)
?mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mtcars$mpg
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(hp, cyl, mean))
DD<-with(mtcars, tapply(hp, cyl, mean))
DD[1]-DD[3]
setwd("C:/Users/Dell Inspiron/Desktop/R programming/Week3")
setwd("C:/Users/Dell Inspiron/Desktop/R programming/Week3/ProgrammingAssignment2")
x<-matrix()
?c
x<-matrix(1:4,nrow = 2,ncol = 2)
x
solve(x)
z<-x
z&<-solve(x)
z1<-solve(x)
z*z1
z%*%Z&
z%*%Z1
z1
z %*% z1
## Put comments here that give an overall description of what your
## functions do
## This function creates a special "matrix" object that can cache
## its inverse
makeCacheMatrix <- function(x = matrix()) {
inv_mat <- NULL
set <- function(y) {
x <<- y
inv_mat <<- NULL
}
get <- function() x
setinv <- function(inverted) inv_mat <<- inverted
getinv <- function() inv_mat
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## This function computes the inverse of the special "matrix"
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv_mat <- x$getinv()
if(!is.null(inv_mat)) {
message("getting cached data")
return(inv_mat)
}
data <- x$get()
inv_mat <- solve(data, ...)
x$setinv(inv_mat)
inv_mat
}
makeCacheMatrix(x)
cacheSolve(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
x<-c(1:5)
cachemean(x)
?rm
f <- function() {
x <- 1
y <- 2
c(x, y)
}
f()
x <- 2
g <- function() {
y <- 1
c(x, y)
}
g()
## Put comments here that give an overall description of what your
## functions do
## This function creates a special "matrix" object that can cache
## its inverse
makeCacheMatrix <- function(x = matrix()) {
inv_mat <- NULL
set <- function(y) {
x <<- y
inv_mat <<- NULL
}
get <- function() x
setinv <- function(inverted) inv_mat <<- inverted
getinv <- function() inv_mat
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## This function computes the inverse of the special "matrix"
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv_mat <- x$getinv()
if(!is.null(inv_mat)) {
message("getting cached data")
return(inv_mat)
}
data <- x$get()
inv_mat <- solve(data, ...)
x$setinv(inv_mat)
inv_mat
}
## Put comments here that give an overall description of what your
## functions do
## This function creates a special "matrix" object that can cache
## its inverse
makeCacheMatrix <- function(x = matrix()) {
inv_mat <- NULL
set <- function(y) {
x <<- y
inv_mat <<- NULL
}
get <- function() x
setinv <- function(inverted) inv_mat <<- inverted
getinv <- function() inv_mat
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## This function computes the inverse of the special "matrix"
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv_mat <- x$getinv()
if(!is.null(inv_mat)) {
message("getting cached data")
return(inv_mat)
}
data <- x$get()
inv_mat <- solve(data, ...)
x$setinv(inv_mat)
inv_mat
}
cacheSolve(z)
z2<-makeCacheMatrix(z)
cacheSolve(z2)
z1
